import { jwtDecode } from "jwt-decode";

// User roles and permissions
export enum UserRole {
  GUEST = "guest",
  USER = "user",
  MODERATOR = "moderator",
  ADMIN = "admin",
  SUPER_ADMIN = "super_admin"
}

export enum Permission {
  VIEW_ROUTES = "view_routes",
  CREATE_ROUTES = "create_routes",
  EDIT_ROUTES = "edit_routes",
  DELETE_ROUTES = "delete_routes",
  MANAGE_USERS = "manage_users",
  SYSTEM_CONFIG = "system_config",
  VIEW_LOGS = "view_logs",
  FULL_ACCESS = "full_access"
}

// Role-based permissions mapping
export const ROLE_PERMISSIONS: Record<UserRole, Permission[]> = {
  [UserRole.GUEST]: [Permission.VIEW_ROUTES],
  [UserRole.USER]: [Permission.VIEW_ROUTES],
  [UserRole.MODERATOR]: [
    Permission.VIEW_ROUTES,
    Permission.CREATE_ROUTES,
    Permission.EDIT_ROUTES
  ],
  [UserRole.ADMIN]: [
    Permission.VIEW_ROUTES,
    Permission.CREATE_ROUTES,
    Permission.EDIT_ROUTES,
    Permission.DELETE_ROUTES,
    Permission.VIEW_LOGS
  ],
  [UserRole.SUPER_ADMIN]: [
    Permission.VIEW_ROUTES,
    Permission.CREATE_ROUTES,
    Permission.EDIT_ROUTES,
    Permission.DELETE_ROUTES,
    Permission.MANAGE_USERS,
    Permission.SYSTEM_CONFIG,
    Permission.VIEW_LOGS,
    Permission.FULL_ACCESS
  ]
};

// User interface
export interface User {
  id: string;
  email: string;
  username: string;
  role: UserRole;
  permissions: Permission[];
  isActive: boolean;
  lastLogin: string;
  createdAt: string;
  updatedAt: string;
}

// JWT Token interface
export interface JWTPayload {
  sub: string; // user id
  email: string;
  role: UserRole;
  permissions: Permission[];
  iat: number; // issued at
  exp: number; // expiration
  jti: string; // JWT ID for revocation
}

// Authentication state
export interface AuthState {
  user: User | null;
  token: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
}

// Mock users for development
export const mockUsers: User[] = [
  {
    id: "1",
    email: "admin@starlines.md",
    username: "admin",
    role: UserRole.SUPER_ADMIN,
    permissions: ROLE_PERMISSIONS[UserRole.SUPER_ADMIN],
    isActive: true,
    lastLogin: new Date().toISOString(),
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-20T00:00:00Z"
  },
  {
    id: "2",
    email: "moderator@starlines.md",
    username: "moderator",
    role: UserRole.MODERATOR,
    permissions: ROLE_PERMISSIONS[UserRole.MODERATOR],
    isActive: true,
    lastLogin: new Date().toISOString(),
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-20T00:00:00Z"
  },
  {
    id: "3",
    email: "user@starlines.md",
    username: "user",
    role: UserRole.USER,
    permissions: ROLE_PERMISSIONS[UserRole.USER],
    isActive: true,
    lastLogin: new Date().toISOString(),
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-20T00:00:00Z"
  }
];

// Mock JWT tokens (in production, these would be generated by a secure backend)
const generateMockToken = (user: User): string => {
  const payload: JWTPayload = {
    sub: user.id,
    email: user.email,
    role: user.role,
    permissions: user.permissions,
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 hours
    jti: `jwt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  };
  
  // In production, this would be signed by a secure backend
  return btoa(JSON.stringify(payload));
};

// Authentication service
export class AuthService {
  private static instance: AuthService;
  private currentUser: User | null = null;
  private currentToken: string | null = null;

  private constructor() {
    // Load from localStorage on initialization
    this.loadFromStorage();
  }

  public static getInstance(): AuthService {
    if (!AuthService.instance) {
      AuthService.instance = new AuthService();
    }
    return AuthService.instance;
  }

  // Login with email and password
  public async login(email: string, password: string): Promise<{ user: User; token: string }> {
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 1000));

      // Find user by email
      const user = mockUsers.find(u => u.email === email);
      if (!user) {
        throw new Error("Invalid credentials");
      }

      // In production, verify password hash here
      if (password !== "password123") { // Mock password
        throw new Error("Invalid credentials");
      }

      // Generate token
      const token = generateMockToken(user);
      
      // Update last login
      user.lastLogin = new Date().toISOString();
      
      // Store in memory and localStorage
      this.currentUser = user;
      this.currentToken = token;
      this.saveToStorage();

      return { user, token };
    } catch (error) {
      throw new Error(error instanceof Error ? error.message : "Login failed");
    }
  }

  // Logout
  public logout(): void {
    this.currentUser = null;
    this.currentToken = null;
    this.clearStorage();
  }

  // Get current user
  public getCurrentUser(): User | null {
    return this.currentUser;
  }

  // Get current token
  public getCurrentToken(): string | null {
    return this.currentToken;
  }

  // Check if user is authenticated
  public isAuthenticated(): boolean {
    return this.currentUser !== null && this.currentToken !== null;
  }

  // Check if user has specific permission
  public hasPermission(permission: Permission): boolean {
    if (!this.currentUser) return false;
    return this.currentUser.permissions.includes(permission);
  }

  // Check if user has any of the specified permissions
  public hasAnyPermission(permissions: Permission[]): boolean {
    if (!this.currentUser) return false;
    return permissions.some(permission => this.currentUser!.permissions.includes(permission));
  }

  // Check if user has all specified permissions
  public hasAllPermissions(permissions: Permission[]): boolean {
    if (!this.currentUser) return false;
    return permissions.every(permission => this.currentUser!.permissions.includes(permission));
  }

  // Check if user has specific role
  public hasRole(role: UserRole): boolean {
    if (!this.currentUser) return false;
    return this.currentUser.role === role;
  }

  // Check if user has any of the specified roles
  public hasAnyRole(roles: UserRole[]): boolean {
    if (!this.currentUser) return false;
    return roles.includes(this.currentUser.role);
  }

  // Validate token
  public validateToken(token: string): boolean {
    try {
      const decoded = jwtDecode<JWTPayload>(token);
      const now = Math.floor(Date.now() / 1000);
      
      // Check expiration
      if (decoded.exp < now) {
        return false;
      }

      // Check if token is not too old (max 24 hours)
      if (decoded.iat < now - (24 * 60 * 60)) {
        return false;
      }

      return true;
    } catch {
      return false;
    }
  }

  // Refresh token
  public async refreshToken(): Promise<string | null> {
    if (!this.currentUser) return null;

    try {
      // In production, this would call a refresh endpoint
      const newToken = generateMockToken(this.currentUser);
      this.currentToken = newToken;
      this.saveToStorage();
      return newToken;
    } catch {
      return null;
    }
  }

  // Private methods for storage management
  private saveToStorage(): void {
    if (typeof window !== 'undefined') {
      localStorage.setItem('starlines_user', JSON.stringify(this.currentUser));
      localStorage.setItem('starlines_token', this.currentToken || '');
    }
  }

  private loadFromStorage(): void {
    if (typeof window !== 'undefined') {
      try {
        const userStr = localStorage.getItem('starlines_user');
        const token = localStorage.getItem('starlines_token');
        
        if (userStr && token) {
          const user = JSON.parse(userStr) as User;
          
          // Validate token before restoring session
          if (this.validateToken(token)) {
            this.currentUser = user;
            this.currentToken = token;
          } else {
            // Token expired, clear storage
            this.clearStorage();
          }
        }
      } catch {
        // Invalid data in storage, clear it
        this.clearStorage();
      }
    }
  }

  private clearStorage(): void {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('starlines_user');
      localStorage.removeItem('starlines_token');
    }
  }
}

// Export singleton instance
export const authService = AuthService.getInstance();

// Utility functions
export const requireAuth = (permission?: Permission): boolean => {
  if (!authService.isAuthenticated()) {
    return false;
  }
  
  if (permission && !authService.hasPermission(permission)) {
    return false;
  }
  
  return true;
};

export const requireRole = (role: UserRole): boolean => {
  return authService.hasRole(role);
};

export const requireAnyRole = (roles: UserRole[]): boolean => {
  return authService.hasAnyRole(roles);
};
